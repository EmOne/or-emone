afterEvaluate {

    // Ensure main repo ui installDist tasks are performed before the custom projects
    if (isCustomProject() && parent == rootProject) {
        def customUi = findProject(':ui')
        if (customUi != null) {
            customUi.getTasksByName('installDist', true).forEach {
                it.mustRunAfter(project(":openremote:ui").getTasksByName('installDist', true))
                it.mustRunAfter(resolveTask(":deployment:installDist"))
            }
        }
    }

    // Add dependencies on model and rest typescript generation
    it.getTasksByName('prepareUi', true).forEach {
        it.dependsOn resolveTask(":ui:component:model:generateTypeScript"), resolveTask(":ui:component:rest:generateTypeScript")
    }
    it.getTasksByName('publishUi', true).forEach {
        it.dependsOn resolveTask(":ui:component:model:generateTypeScript"), resolveTask(":ui:component:rest:generateTypeScript")
    }
    it.getTasksByName('installDist', true).forEach {
        it.dependsOn resolveTask(":ui:component:model:generateTypeScript"), resolveTask(":ui:component:rest:generateTypeScript")
    }
}

task deleteNodeModules {
    doFirst {
       delete "${project(':openremote').projectDir}/node_modules"
    }
}

task clean {
    // Do this as it will conflict with root project node_modules
    if (isCustomProject() && parent == rootProject) {
        dependsOn deleteNodeModules
    }
}

task modelWatch {
    dependsOn resolveTask(":ui:component:model:build"), resolveTask(":ui:component:rest:build")
}